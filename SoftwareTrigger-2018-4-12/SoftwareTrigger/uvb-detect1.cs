//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 8.0
//
//  This file is intended to be used with the project HDevelopTemplate
//  which can be found in %HALCONROOT%\examples\c#\HDevelopTemplate\
//

using System;
using HalconDotNet;

public class HDevelopExport
{
    private HTuple hv_ExpDefaultWinHandle;

    // Main procedure 
    private void action(String strFileName, Int32 nAreaMin, Int32 nFilterSize, Int32 nDynThresh, out Int32 nDefectNum)
    {

        // Local iconic variables 

        HObject ho_Image, ho_Region, ho_RegionFillUp;
        HObject ho_ImageReduced, ho_ImageMean, ho_RegionDynThresh;
        HObject ho_ConnectedRegions, ho_SelectedRegions;

        // Local control variables 

        HTuple hv_WindowID = new HTuple(), hv_Number, hv_Width, hv_Height, pointer, type;

        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Image);
        HOperatorSet.GenEmptyObj(out ho_Region);
        HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
        HOperatorSet.GenEmptyObj(out ho_ImageReduced);
        HOperatorSet.GenEmptyObj(out ho_ImageMean);
        HOperatorSet.GenEmptyObj(out ho_RegionDynThresh);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions);

        ho_Image.Dispose();
        if (strFileName.Length == 0)
        {
            nDefectNum = 0;
            return;
        }
        HOperatorSet.ReadImage(out ho_Image, strFileName);

        //if (hv_ExpDefaultWinHandle != null)
        //{
        //    HOperatorSet.CloseWindow(hv_ExpDefaultWinHandle);
        //}

        //if (hv_ExpDefaultWinHandle == null)
        //{
        //    HOperatorSet.OpenWindow(0, 0, nWidth, nHeight, 3600, "", "", out hv_WindowID);
        //    hv_ExpDefaultWinHandle = hv_WindowID;
        //}

        HOperatorSet.GetImagePointer1(ho_Image, out pointer, out type, out hv_Width, out hv_Height);
        HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height - 1, hv_Width - 1);

        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_Image, out ho_Region, 60, 255);
        ho_RegionFillUp.Dispose();
        HOperatorSet.FillUp(ho_Region, out ho_RegionFillUp);
        ho_ImageReduced.Dispose();
        HOperatorSet.ReduceDomain(ho_Image, ho_RegionFillUp, out ho_ImageReduced);
        ho_ImageMean.Dispose();
        HOperatorSet.MeanImage(ho_ImageReduced, out ho_ImageMean, nFilterSize, nFilterSize /*35, 35*/);
        ho_RegionDynThresh.Dispose();
        HOperatorSet.DynThreshold(ho_ImageReduced, ho_ImageMean, out ho_RegionDynThresh, nDynThresh /*14*/, "dark");
        ho_ConnectedRegions.Dispose();
        HOperatorSet.Connection(ho_RegionDynThresh, out ho_ConnectedRegions);
        ho_SelectedRegions.Dispose();
        HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", "and", nAreaMin, nAreaMin+500);
        HOperatorSet.CountObj(ho_SelectedRegions, out hv_Number);
        nDefectNum = hv_Number;
        // Please note: In the exported code the zooming of images will not be adjusted
        // automatically (like in HDevelop). Therefore you have to call 'HOperatorSet.SetPart()'
        // with the parameters of the image you want to display.
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        // Please note: In the exported code the zooming of images will not be adjusted
        // automatically (like in HDevelop). Therefore you have to call 'HOperatorSet.SetPart()'
        // with the parameters of the image you want to display.
        HOperatorSet.DispObj(ho_SelectedRegions, hv_ExpDefaultWinHandle);

        // HOperatorSet.DumpWindow(hv_ExpDefaultWinHandle, "jpeg", strFileName);
        ho_Image.Dispose();
        ho_Region.Dispose();
        ho_RegionFillUp.Dispose();
        ho_ImageReduced.Dispose();
        ho_ImageMean.Dispose();
        ho_RegionDynThresh.Dispose();
        ho_ConnectedRegions.Dispose();
        ho_SelectedRegions.Dispose();
    }

    public void InitHalcon()
    {
        // Default settings used in HDevelop 
        HOperatorSet.SetSystem("do_low_error", "false");
    }

    public void RunHalcon(HTuple Window, String strFilename, Int32 nAreaMin, Int32 nFilterSize, Int32 nDynThresh, out Int32 nDefectNum)
    {
        hv_ExpDefaultWinHandle = Window;
        action(strFilename, nAreaMin, nFilterSize, nDynThresh, out nDefectNum);
    }

}

